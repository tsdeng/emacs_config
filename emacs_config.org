#+TITLE: Tianshuo's emacs setup
#+OPTIONS: toc:4
#+PROPERTY: header-args :tangle ~/.emacs.d/emacs_config.el :comments org
#+STARTUP: overview

* How to use
This emacs config file is written in "Literate Programming" style in
org-mode. Adding =(org-babel-load-file "~/.emacs.d/emacs_config.org")= in =~/.emacs=
loads this config.

Manually maintained lisp files are in the ~/.emacs.d/elisp folder.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elisp/")
#+END_SRC

* My custom config group to remember user preference.
Guard each config by a boolean variable, so the user's preference can be
remembered. This is for enabling different configurations in different
environments.

#+BEGIN_SRC emacs-lisp
  (defgroup my-config nil "Group for my emacs config" :group 'tools)
  ;; Learnt the function macro trick from here:
  ;; https://mullikine.github.io/posts/macro-tutorial/ C-h R elisp i ,@
  ;; <RET>
  (defmacro defconfig (name default-value &rest body)
    "Define custom config guarded by a boolean switch."
    (let* ((bh (car body))
           (bt (cdr body))
           (desc (if (stringp bh)
                     bh
                   ""))
           (body (if (stringp bh)
                     bt
                   body
                   )
                 ))
      `(progn
         (defcustom ,name ,default-value
           ,desc
           :group 'my-config
           :type 'boolean)
         (add-hook 'after-init-hook
                   (lambda() (if ,name
                                 (progn
                                   ,@body
                                   )
                               ))
                   :append)
         )))

#+END_SRC

* Package archives(respositories) and auto install
MELPA for community packages.
#+BEGIN_SRC emacs-lisp
  ;; https://emacs.stackexchange.com/questions/2969/is-it-possible-to-use-both-melpa-and-melpa-stable-at-the-same-time
  (defconfig mc-use-melpa-packages t
    (if mc-use-melpa-packages
        (setq package-archives
              '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
                ("MELPA Stable" . "https://stable.melpa.org/packages/")
                ("MELPA"        . "https://melpa.org/packages/"))
              package-archive-priorities
              '(("MELPA Stable" . 10)
                ("GNU ELPA"     . 5)
                ("MELPA"        . 0)))
      )
    (package-initialize
     ))

#+END_SRC

* Literate Programming using org-mode
Making sure fonts in the code block is proper highlighted; Disable
confirmation when executing a code block when =C-c C-c=

#+BEGIN_SRC emacs-lisp
  (defconfig literate-programming-in-org t
             (use-package org
               :config
               (setq org-confirm-babel-evaluate nil
                     org-src-fontify-natively t
                     org-src-tab-acts-natively t)
               (org-babel-do-load-languages
                'org-babel-load-languages
                '(
                  (emacs-lisp . t)
                  (sql . t)
                  ))
               ) ;; use-package
             )
#+END_SRC

* Terminal
** Basic term support
#+BEGIN_SRC emacs-lisp
  (defconfig basic-term-config t
    "Enable mouse support. C-c C-y to paste"
    (with-eval-after-load "term"
      (xterm-mouse-mode 1)
      (define-key term-raw-map (kbd "C-c C-y") 'term-paste)
      ))
#+END_SRC

** F2 to create terminal
#+BEGIN_SRC emacs-lisp
  (defconfig f2-create-term-buffer t
    (with-eval-after-load "compile"
      (require 'ansi-color)
      (defun colorize-compilation-buffer ()
        (ansi-color-apply-on-region (point-min) (point-max)))
      (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
      (setq compilation-scroll-output t)
      )

    ;;disable hl mode for terminal
    (add-hook 'term-mode-hook (lambda ()
                                (setq-local global-hl-line-mode
                                            nil)))

    (defadvice ansi-term (after advice-term-line-mode activate)
      (visual-line-mode -1) ;; avoid weird line wrapping issue
      (goto-address-mode) ;; make link clickable
      (yas-minor-mode -1) ;; tab expansion of yas could mess up the terminal, see https://github.com/joaotavora/yasnippet/issues/289
      )


    (defun visit-ansi-term ()
      "If the current buffer is:
    1) a running ansi-term named *ansi-term*, rename it.
    2) a stopped ansi-term, kill it and create a new one.
    3) a non ansi-term, go to an already running ansi-term
       or start a new one while killing a defunt one"
      (interactive)
      (require 'term)
      (let ((is-term (string= "term-mode" major-mode))
            (is-running (term-check-proc (buffer-name)))
            (term-cmd "/bin/zsh")
            (anon-term (get-buffer "*ansi-term*")))
        (if is-term
            (if is-running
                (if (string= "*ansi-term*" (buffer-name))
                    (call-interactively 'rename-buffer)
                  (if anon-term
                      (switch-to-buffer "*ansi-term*")
                    (ansi-term term-cmd)))
              (kill-buffer (buffer-name))
              (ansi-term term-cmd))
          (if anon-term
              (if (term-check-proc "*ansi-term*")
                  (switch-to-buffer "*ansi-term*")
                (kill-buffer "*ansi-term*")
                (ansi-term term-cmd))
            (ansi-term term-cmd)))))
    (global-set-key (kbd "<f2>") 'visit-ansi-term)
    )
#+END_SRC

#+RESULTS:
| org-persist-load-all | tramp-register-archive-autoload-file-name-handler | (lambda nil (if mc-use-melpa-packages (progn (if mc-use-melpa-packages (progn (setq package-archives '((GNU ELPA . https://elpa.gnu.org/packages/) (MELPA Stable . https://stable.melpa.org/packages/) (MELPA . https://melpa.org/packages/))) (setq package-archive-priorities '((MELPA Stable . 10) (GNU ELPA . 5) (MELPA . 0))))) (package-initialize)))) | (lambda nil (if literate-programming-in-org (progn (progn (defvar use-package--warning0 #'(lambda (keyword err) (let ((msg (format %s/%s: %s 'org keyword (error-message-string err)))) (display-warning 'use-package msg :error)))) (condition-case err (if (not (require 'org nil t)) (display-warning 'use-package (format Cannot load %s 'org) :error) (condition-case err (progn (progn (setq org-confirm-babel-evaluate nil) (setq org-src-fontify-natively t) (setq org-src-tab-acts-natively t)) (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t) (sql . t))) t) ((debug error) (funcall use-package--warning0 :config err)))) ((debug error) (funcall use-package--warning0 :catch err))))))) | (lambda nil (if basic-term-config (progn (eval-after-load term #'(lambda nil (xterm-mouse-mode 1) (define-key term-raw-map (kbd C-c C-y) 'term-paste)))))) | (lambda nil (if f2-create-term-buffer (progn (eval-after-load compile #'(lambda nil (require 'ansi-color) (defalias 'colorize-compilation-buffer #'(lambda nil (ansi-color-apply-on-region (point-min) (point-max)))) (add-hook 'compilation-filter-hook 'colorize-compilation-buffer) (setq compilation-scroll-output t))) (add-hook 'term-mode-hook #'(lambda nil (set (make-local-variable 'global-hl-line-mode) nil))) (progn (ad-add-advice 'ansi-term '(advice-term-line-mode nil t (advice lambda nil (visual-line-mode -1) (goto-address-mode) (yas-minor-mode -1))) 'after 'nil) (ad-activate 'ansi-term nil) 'ansi-term) (defalias 'visit-ansi-term #'(lambda nil If the current buffer is: |

* Basic Emacs Config
#+BEGIN_SRC emacs-lisp
  (defconfig disable-startup-screen t
    (setq inhibit-startup-screen t)
    )

  (defconfig enable-mouse t
    (xterm-mouse-mode 1)
    )

  (defconfig mac-emacs-use-ls-emulation t
    (when (string= system-type "darwin")
      (setq ls-lisp-use-insert-directory-program nil)
      (require 'ls-lisp)
      ))

  (defconfig temp-file-to-temp-dir t
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
    ;; fix 'controll path too long' issue when using tramp
    (setenv "TMPDIR" "/tmp")
    )

  (defconfig buffer-file-auto-sync t
    (global-auto-revert-mode t)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    )

  (defconfig auto-copy-paste-between-os-and-emacs t
    "Use either osc52, xclip or osx-clipboard."
    (defun clip-use-osx ()
      "Copy to osx's clipboard directly, this is useful for osx's terminal \
               which does not support osc52"
      (interactive)
      (use-package osx-clipboard
        :config
        (osx-clipboard-mode +1)
        (message "osx-clippboard enabled!!!"
        ))
      )

    (defun clip-use-xclip ()
      "Copy to linux's paste board directly with xclip, need to make sure xclip \
               is installed on the system.  This is useful only when using gnome-terminal \
               which does not support osc52"
      (interactive)
      (use-package xclip
        :config
        (xclip-mode)
        ))

    (defun in-ssh ()
      (interactive)
      "if I'm in ssh"
      (or (not (null (getenv "SSH_TTY"))) (not (null (getenv "TMUX")))
      ))

    (defun clip-use-osc52 ()
      "Use osc52 to paste, should support remote terminal, even within tmux.  In \
               unsupported terminals, e.g. gnome-terminal, enabling this will cause weird \
               escape characters being displayed on the screen"
      (interactive)
      (require 'osc52e)
      (osc52-set-cut-function))

    ;; OSX
    (if (string-equal system-type "darwin")
        (clip-use-osx))
    ;; Linux
    (if (string-equal system-type "gnu/linux")
        (if (in-ssh)
            (clip-use-osc52)
          (clip-use-xclip))
      )
    )

  (defconfig copy-url-when-clicked t
    (defun url-to-pasteboard (url &rest args)
      (message "pasteboard < %s" url)
      (kill-new url)
      )

    (defun browse-to-cut ()
      "Cut to clipboard when clicking on a link"
      (interactive)
      (setq browse-url-browser-function 'url-to-pasteboard)
      )

    (defun browse-to-open ()
      "revert browse-to-cut"
      (interactive)
      (setq browse-url-browser-function 'browse-url-default-browser)
      )
    (browse-to-cut)
    )

  (defconfig scroll-with-arrow-keys t
    (global-set-key [up] (lambda () (interactive) (scroll-down 1)))
    (global-set-key [down] (lambda () (interactive) (scroll-up 1)))
    )

  (defconfig fix-shell-path-in-gui-emacs t
    "Fix PATH when executing a shell command from GUI emacs"
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :config
      (exec-path-from-shell-initialize)
      )
    )

  (defconfig use-recent-files-buffer t
    (with-eval-after-load 'recentf
      (recentf-mode t) ;; enable recent files mode. it's autoloaded function.
      (setq recentf-max-saved-items 10)
      )
    )

  (defconfig gui-hide-toolbar-scrollbar t
    (setq-default frame-title-format "%b (%f)")
    (if window-system (progn
                        (tool-bar-mode -1)
                        (scroll-bar-mode -1)
                        ))
    )

  (defconfig hide-menu-bar t
    (menu-bar-mode 0)
    )

  (defconfig remember-last-open-location t
    (save-place-mode 1)
    )

  (defconfig no-tabs t
    (setq-default indent-tabs-mode nil))

  (defconfig show-matching-parens t
    (show-paren-mode 1) ;; show matching paren
    (defadvice show-paren-function
        (after show-matching-paren-offscreen activate)
      "If the matching paren is offscreen, show the matching line in the
        echo area. Has no effect if the character before point is not of
        the syntax class."
      (interactive)
      (let* ((cb (char-before (point)))
             (matching-text (and cb
                                 (char-equal (char-syntax cb) ?\})
                                 (blink-matching-open))))
        (when matching-text (message matching-text))))
    )

  (defconfig auto-indent-and-pair-parens t
    (electric-indent-mode +1)
    (electric-pair-mode +1)
    )

  (defconfig avoid-screen-flickering-when-recenter t
    "Borrowed from: https://emacs.stackexchange.com/questions/47091/stop-emacs-from-redrawing-display"
    (setq recenter-redisplay nil)
    )

  (defconfig expand-region t
     (use-package expand-region
       :ensure t
       :bind (("C-]" . er/expand-region))
       )
    )

  (defconfig use-writeroom t
     (use-package writeroom-mode
       :ensure t
       :bind ("C-x RET" . writeroom-mode)
       :config
       (setq writeroom-restore-window-config t)
       )
    )

  (defconfig C-c-for-caps-lock t
     (use-package caps-lock
       :ensure t
       :bind ("C-x c" . caps-lock-mode)
       )
    )

  (defconfig fill-column-80 t
    "Some discussions:
     - https://hackernoon.com/does-column-width-of-80-make-sense-in-2018-50c161fbdcf6
     - https://stackoverflow.com/questions/578059/studies-on-optimal-code-width"
    (setq-default fill-column 80)
    )
#+END_SRC

#+RESULTS:
| tramp-register-archive-file-name-handler | (lambda nil (if mc-use-melpa-packages (progn (if mc-use-melpa-packages (setq package-archives '((GNU ELPA . https://elpa.gnu.org/packages/) (MELPA Stable . https://stable.melpa.org/packages/) (MELPA . https://melpa.org/packages/)) package-archive-priorities '((MELPA Stable . 10) (GNU ELPA . 5) (MELPA . 0)))) (package-initialize)))) | (lambda nil (if literate-programming-in-org (progn (eval-after-load 'org #'(lambda nil (setq org-confirm-babel-evaluate nil org-src-fontify-natively t org-src-tab-acts-natively t) (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t) (sql . t)))))))) | (lambda nil (if basic-term-config (progn (eval-after-load term #'(lambda nil (xterm-mouse-mode 1) (define-key term-raw-map (kbd C-c C-y) 'term-paste)))))) | (lambda nil (if f2-create-term-buffer (progn (eval-after-load compile #'(lambda nil (require 'ansi-color) (defalias 'colorize-compilation-buffer #'(lambda nil (toggle-read-only) (ansi-color-apply-on-region (point-min) (point-max)) (toggle-read-only))) (add-hook 'compilation-filter-hook 'colorize-compilation-buffer) (setq compilation-scroll-output t))) (add-hook 'term-mode-hook #'(lambda nil (set (make-local-variable 'global-hl-line-mode) nil))) (progn (ad-add-advice 'ansi-term '(advice-term-line-mode nil t (advice lambda nil (visual-line-mode -1) (goto-address-mode) (yas-minor-mode -1))) 'after 'nil) (ad-activate 'ansi-term nil) 'ansi-term) (defalias 'visit-ansi-term #'(lambda nil If the current buffer is: |

* Dired and files
#+BEGIN_SRC emacs-lisp
  (defconfig dired-shortcuts t
    "Add useful command shortcuts. Press \"e\" to edit file name in-place.
  Press \"i\" to insert subdir.
  Press \"k\" to kill subdir."
    (with-eval-after-load 'dired
      (define-key dired-mode-map "e" 'wdired-change-to-wdired-mode)
      (define-key dired-mode-map "k" 'dired-kill-subdir)
      ))
#+END_SRC

** Shortcut for delete file and current buffer
#+BEGIN_SRC emacs-lisp
  (defun delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if filename
          (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
              (progn
                (delete-file filename)
                (message "Deleted file %s." filename)
                (kill-buffer)))
        (message "Not a file visiting buffer!"))))
#+END_SRC

* Search & Jump
** Repeatly pop marks

#+BEGIN_SRC emacs-lisp
  (defconfig repeat-poping-marks t
    "C-u C-SPC C-SPC... to keep poping marks"
    (setq set-mark-command-repeat-pop t)
    )
#+END_SRC

** C-c j to use ace-jump
#+BEGIN_SRC emacs-lisp
  (defconfig use-ace-jump t
             (use-package ace-jump-mode
               :ensure t
               :bind ("C-c j" . ace-jump-mode)
               )
    )
#+END_SRC

** Use ag
#+BEGIN_SRC emacs-lisp
  (defconfig use-ag t
             (use-package ag
               :bind (("C-c s" . counsel-ag-select))
               :config
               (message "ag config loaded")
               (setq ag-reuse-buffers t)
               (setq ag-reuse-window t)

               (defun counsel-ag-select ()
                 (interactive)
                 (if (use-region-p)
                     (counsel-ag (buffer-substring-no-properties (region-beginning) (region-end)))
                   (counsel-ag)
                   ))
               )
             )
#+END_SRC
* Window Management
** Prevent emacs from splitting windows aggresively
http://blog.mpacula.com/2012/01/28/howto-prevent-emacs-from-splitting-windows/
#+BEGIN_SRC emacs-lisp
  (defconfig prefer-window-split-horizontally t
    (setq split-height-threshold 1000)
    (setq split-width-threshold 100) ;; prefer split horizontally
    )
#+END_SRC

** Desktop save current session
Super useful function:
- desktop-save-in-desktop-dir, will save the desktop in current working dir
- desktop-change-dir, load the desktop file from selected folder
#+BEGIN_SRC emacs-lisp
  (defconfig save-desktop-path t
    (setq desktop-path '("~" "~/.emacs.d/"))
    )
#+END_SRC

** F7 and F9 to switch buffer quickly
#+BEGIN_SRC emacs-lisp
  (defconfig f7-f9-to-switch-buffer t
    (global-set-key [f7] 'previous-buffer)
    (global-set-key [f9] 'next-buffer)
    )
#+END_SRC
** Winner mode
#+BEGIN_SRC emacs-lisp
  (defconfig use-winner-mode t
    (winner-mode 1)
    (global-set-key (kbd "s-<left>") 'winner-undo)
    (global-set-key (kbd "s-<right>") 'winner-redo)
    )
#+END_SRC

** Ace window with C-x o
#+BEGIN_SRC emacs-lisp
  (defconfig use-ace-window t
    (use-package ace-window
      :bind (
             ("C-x o" . ace-window)
             ("C-c w s" . ace-swap-window)
             )
      )
    )
#+END_SRC

** Dedicated mode to lock a window
#+BEGIN_SRC emacs-lisp
  (defconfig use-dedicated-mode t
    "C-c p to pin a window."
    (use-package dedicated
      :ensure t
      :bind (("C-c p" . dedicated-mode))
      )
    )
#+END_SRC

** Use register-list
#+BEGIN_SRC emacs-lisp
  (defconfig use-register-list
             (use-package register-list)
    )
#+END_SRC
* Bookmark
** Always save bookmarks to disk
#+BEGIN_SRC emacs-lisp
  (defconfig save-bookmarks-to-disk t
    (setq bookmark-save-flag 1)
    )
#+END_SRC
* Ivy
Ivy User Manual: https://oremacs.com/swiper/.  

Can trigger different actions on a selected item by pressing *M-o* on
the highlighted item.

C-j to select current directory candidate and a start a new session.
#+BEGIN_SRC emacs-lisp
  (defconfig use-ivy-and-counsel t
    ;; counsel will bring ivy and swiper as dependency.
    (use-package counsel
      :ensure t
      :init
      (setq counsel-find-file-at-point t)
      (setq counsel-preselect-current-file t)
      (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d ")
     :bind (:map counsel-mode-map
                  ("C-x C-r" . counsel-recentf)
                  ("C-x b" . ivy-switch-buffer)
                  ([f8] . ivy-switch-buffer)
                  ("M-s" . swiper)
                  ("C-c r" . ivy-resume)
                  ("<f12>" . counsel-imenu)
            )
     :config
     (counsel-mode 1)
     :demand t  ;; force loading the package so the ":config" section can run and counsel-mode will enable globally.
      )  ;; use-package
    )  ;; defconfig
#+END_SRC
* Compile
** <f6> compile highlight errors
#+BEGIN_SRC emacs-lisp
  (defconfig f6-to-compile t
    ;; bug in emacs! https://groups.google.com/forum/#!topic/gnu.emacs.bug/4t3reC82lqc
    ;; (setq compilation-auto-jump-to-first-error t)
    (setq next-error-highlight t)
    (setq next-error-follow-minor-mode t)
    (add-hook 'compliation-minor-mode-hook 'next-error-follow-minor-mode)
    (global-set-key (kbd "<f6>") 'compile)
    )
#+END_SRC
** Auto-compile
#+BEGIN_SRC emacs-lisp
  (defun auto-compile-func ()
    (recompile)
    )

  (defun auto-compile-on()
    "run compile after saving buffer"
    (interactive)
    (add-hook 'after-save-hook
              'auto-compile-func t t)
    )
  (defun auto-compile-off()
    "turn off auto export pdf"
    (interactive)
    (remove-hook 'after-save-hook
                 'auto-compile-func t)
    )
#+END_SRC
* Python
** Anaconda and company mode
Some key concepts of style checking for python
- PEP 8: [[https://www.python.org/dev/peps/][PEP]] is short for "Python Enhancement Proposals", think of it as a document group. PEP 8 is a proposal about style guide for python code.
- pep8: a tool to check your code style according to PEP 8. Anaconda installs pep8 automatically.
- pyflake: not a style checking tool. It verifies logistic errors, things like: "imported but unused"
- flake8: a wrapper of pep8 and pyflake.
- pylint: similar to pep8, but has more verification items and options
#+BEGIN_SRC emacs-lisp
  (defconfig python-use-anaconda nil
             (use-package anaconda-mode :ensure t)
             (use-package company :ensure t)
             (use-package company-anaconda :ensure t)
             (use-package py-autopep8 :ensure t)
             (with-eval-after-load 'python
               (message "python setup is done!!!!")
               (add-hook 'python-mode-hook
                         (flycheck-mode 1)
                         (anaconda-mode 1)
                         (company-mode 1) ;; auto complete
                         (electric-indent-local-mode -1) ;; disable auto indent, since auto indent inserts tab for empty lines. flake8 complains about it
                         (add-to-list 'company-backends 'company-anaconda) ;; add-to-list will only add when it's not there
                         (py-autopep8-enable-on-save)
                         ))
             )

#+END_SRC
** pyproject mode
#+BEGIN_SRC emacs-lisp
  (defconfig use-pyproject-mode t
             (use-package toml-mode :ensure t)
             (require 'pyproject-mode)
  )

#+END_SRC
* C and CPP IDE
#+BEGIN_SRC emacs-lisp
  (defconfig c-use-lsp-automatically t
    (defun c-setup ()
      (if (locate-dominating-file "." "compile_commands.json")
          (progn
            (message "found compile_command.json, enabling lsp-mode")
            ;;(flycheck-mode)
             (setq-local company-backends
                   '(company-capf company-files))
            (lsp)
            )
        )
      )
    (use-package lsp-mode :ensure t)
    (use-package company :ensure t)

    (with-eval-after-load 'cc-mode
      (message "Added c-mode hooks!!!!")
      (add-hook 'c-mode-hook #'c-setup)
      (add-hook 'c++-mode-hook #'c-setup)
      )
    )

  (defconfig c-use-man-shortcut t
    (with-eval-after-load 'cc-mode
      (add-hook 'c-mode-hook (lambda()(local-set-key (kbd "C-c m") 'man)))
      (add-hook 'c++-mode-hook (lambda()(local-set-key (kbd "C-c m") 'man)))

      )
    )
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (defconfig python-use-lsp-automatically t
             (defun maybe-python-lsp()
               (interactive)
               (message "in maybe-python-lsp")
               (if (executable-find "pylsp")
                   (progn
                     (message "pylsp is available. Enabling lsp mode.")
                     (lsp))
                 (message "Can not find pylsp executable")
                 )
               )
             (use-package lsp-mode :ensure t
               :config
               (with-eval-after-load 'python
                 (add-hook 'python-mode-hook #'maybe-python-lsp)
                 )
               )
             )
#+END_SRC
* YAML
#+BEGIN_SRC emacs-lisp
    (defconfig use-yaml-mode t
      (use-package yaml-mode))
#+END_SRC
* Latex
** Basic latex setup
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq TeX-PDF-mode t)
#+END_SRC
** org-mode automatic export to pdf and open after saving
#+BEGIN_SRC emacs-lisp
  (defun org-export-pdf-then-open()
    (org-open-file
     (org-latex-export-to-pdf))
    )
  (defun org-auto-export-on()
    "auto export to pdf when saving an org file"
    (interactive)
    (when (eq major-mode 'org-mode)
      (add-hook 'after-save-hook
                'org-export-pdf-then-open t t)
      )  
    )
  (defun org-auto-export-off()
    "turn off auto export pdf"
    (interactive)
    (when (eq major-mode 'org-mode)
      (remove-hook 'after-save-hook
                   'org-export-pdf-then-open t)
      )  
    )
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (defconfig use-markdown-mode t
    (use-package markdown-mode
      :defer t
      :config
      (setq markdown-header-scaling t)
      (setq markdown-fontify-code-blocks-natively t)
      (add-hook 'markdown-mode-hook 'display-fill-column-indicator-mode)
      )
    )
#+END_SRC

Enable Pandoc mode for md files.
#+BEGIN_SRC emacs-lisp

  (defconfig use-pandoc-mode t
    (use-package pandoc-mode
      :ensure t
      :config
      (add-hook 'markdown-mode-hook 'pandoc-mode)
      (defun pandoc-export-pdf-on-save()
        (interactive)
        (add-hook 'after-save-hook 'pandoc-convert-to-pdf nil t)
        )
      )
    )
#+END_SRC
* Yasnippets
#+BEGIN_SRC emacs-lisp
  (defconfig
   use-yasnippets t
   (use-package yasnippet
     :ensure t
     :bind (("C-c y" . ivy-yasnippet))
     :config
     (if use-ivy-and-counsel
         (progn
           (use-package ivy-yasnippet)
           (use-package yasnippet-snippets)
           )
       nil ;; else
     )
     (yas-global-mode 1)
     )
   )
#+END_SRC

* Auto-insert-mode
#+BEGIN_SRC emacs-lisp
  ;; The trick of using autoinsert with yasnippet:
  ;; https://howardism.org/Technical/Emacs/templates-tutorial.html
  (defun autoinsert-yas-expand()
    "Replace text in yasnippet template."
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))

  (defconfig use-auto-insert t
             (use-package yasnippet :ensure t)
             (use-package autoinsert :ensure t
               :init
               (setq auto-insert-directory (locate-user-emacs-file "snippets/templates"))
               (setq auto-insert-query nil) ;;; If you don't want to be prompted before insertion               
               :config
               (define-auto-insert
                 "pyproject.toml" ["pyproject.toml.template" autoinsert-yas-expand]))
             (auto-insert-mode t)
  )  ;; defconfig

#+END_SRC

* k8s functions
#+BEGIN_SRC emacs-lisp
    (defun use-k8s-mode ()
      (interactive)
      (beginning-of-buffer)
      (insert "-*- mode: k8s -*-")
      (comment-line 1)
      (normal-mode)
      )

  ;; Any yaml file under a `k8s` folder should have k8s-mode enabled.
  (add-to-list 'auto-mode-alist 
                   '("k8s/.*/.*\\.yaml\\'" . k8s-mode))
  ;;  (defun maybe-enable-k8s-mode ()
  ;;    (interactive)
  ;;    (if (string-match-p (regexp-quote "/k8s/") (buffer-file-name))
  ;;        (progn (message "in k8s folder!")
  ;;               (k8s-mode)
  ;;               )
  ;;
  ;;      (message "NOT in k8s folder")
  ;;    ))
  ;;
  ;;
  ;;  (with-eval-after-load 'yaml-mode
  ;;  (add-hook 'yaml-mode-hook 'maybe-enable-k8s-mode))
#+END_SRC
* Check Startup Time
To check startup-time.
#+BEGIN_SRC emacs-lisp
  (defconfig log-start-time t
    (message (concat "emacs init time is:" (emacs-init-time)))
    )
#+END_SRC

* Finalize emacs config initialization
#+BEGIN_SRC emacs-lisp
  (defconfig my-config-initialized t
    (if my-config-initialized
        (message"already initialized, not asking")
      (progn
        (add-hook 'emacs-startup-hook (lambda ()(customize-group 'my-config)))
        )
      )
    (customize-save-variable 'my-config-initialized t)
    )
#+END_SRC

